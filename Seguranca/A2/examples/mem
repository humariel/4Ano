	.file	"mem.c"
	.intel_syntax noprefix
	.globl	cntvar
	.section	.rodata
	.align 4
	.type	cntvar, @object
	.size	cntvar, 9
cntvar:
	.string	"constant"
	.local	bssvar
	.comm	bssvar,4,4
	.align 4
.LC0:
	.string	"foo [%03u]: &argc  = %08x -> stack = %08x\n"
	.text
	.globl	foo
	.type	foo, @function
foo:
	push	ebp
	mov	ebp, esp
	push	ebx
	sub	esp, 1048596
	call	__x86.get_pc_thunk.ax
	add	eax, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_
	lea	ecx, 8[ebp]
	mov	DWORD PTR -12[ebp], ecx
	mov	edx, DWORD PTR -12[ebp]
	and	edx, DWORD PTR 12[ebp]
	push	edx
	push	DWORD PTR -12[ebp]
	push	DWORD PTR 16[ebp]
	lea	edx, .LC0@GOTOFF[eax]
	push	edx
	mov	ebx, eax
	call	printf@PLT
	add	esp, 16
	mov	eax, DWORD PTR 16[ebp]
	cmp	eax, DWORD PTR 20[ebp]
	jnb	.L3
	mov	eax, DWORD PTR 16[ebp]
	lea	edx, 1[eax]
	mov	eax, DWORD PTR 8[ebp]
	push	DWORD PTR 20[ebp]
	push	edx
	push	DWORD PTR 12[ebp]
	push	eax
	call	foo
	add	esp, 16
.L3:
	nop
	mov	ebx, DWORD PTR -4[ebp]
	leave
	ret
	.size	foo, .-foo
	.section	.rodata
	.align 4
.LC1:
	.string	"Internal Variables (Page = %u)\n"
	.align 4
.LC2:
	.string	"&argc  = %08x -> stack = %08x\n"
	.align 4
.LC3:
	.string	"malloc = %08x -> heap  = %08x\n"
	.align 4
.LC4:
	.string	"bssvar = %08x -> bss   = %08x\n"
	.align 4
.LC5:
	.string	"cntvar = %08x -> const = %08x\n"
	.align 4
.LC6:
	.string	"&main  = %08x -> text  = %08x\n"
.LC7:
	.string	"r"
.LC8:
	.string	"/proc/self/maps"
.LC9:
	.string	"\n\nContent of /proc/self/maps"
.LC10:
	.string	"%s"
.LC11:
	.string	"\nStack evolution:"
	.text
	.globl	main
	.type	main, @function
main:
	lea	ecx, 4[esp]
	and	esp, -16
	push	DWORD PTR -4[ecx]
	push	ebp
	mov	ebp, esp
	push	ebx
	push	ecx
	sub	esp, 1056
	call	__x86.get_pc_thunk.bx
	add	ebx, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_
	mov	eax, ecx
	mov	DWORD PTR -12[ebp], eax
	sub	esp, 12
	push	4
	call	malloc@PLT
	add	esp, 16
	mov	DWORD PTR -16[ebp], eax
	lea	eax, bssvar@GOTOFF[ebx]
	mov	DWORD PTR -20[ebp], eax
	lea	eax, cntvar@GOTOFF[ebx]
	mov	DWORD PTR -24[ebp], eax
	lea	eax, main@GOTOFF[ebx]
	mov	DWORD PTR -28[ebp], eax
	mov	DWORD PTR -1060[ebp], -1
	call	getpagesize@PLT
	sub	eax, 1
	mov	edx, eax
	mov	eax, DWORD PTR -1060[ebp]
	xor	eax, edx
	mov	DWORD PTR -1060[ebp], eax
	call	getpagesize@PLT
	sub	esp, 8
	push	eax
	lea	eax, .LC1@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
	mov	eax, DWORD PTR -1060[ebp]
	and	eax, DWORD PTR -12[ebp]
	sub	esp, 4
	push	eax
	push	DWORD PTR -12[ebp]
	lea	eax, .LC2@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
	mov	eax, DWORD PTR -1060[ebp]
	and	eax, DWORD PTR -16[ebp]
	sub	esp, 4
	push	eax
	push	DWORD PTR -16[ebp]
	lea	eax, .LC3@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
	mov	eax, DWORD PTR -1060[ebp]
	and	eax, DWORD PTR -20[ebp]
	sub	esp, 4
	push	eax
	push	DWORD PTR -20[ebp]
	lea	eax, .LC4@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
	mov	eax, DWORD PTR -1060[ebp]
	and	eax, DWORD PTR -24[ebp]
	sub	esp, 4
	push	eax
	push	DWORD PTR -24[ebp]
	lea	eax, .LC5@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
	mov	eax, DWORD PTR -1060[ebp]
	and	eax, DWORD PTR -28[ebp]
	sub	esp, 4
	push	eax
	push	DWORD PTR -28[ebp]
	lea	eax, .LC6@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
	sub	esp, 8
	lea	eax, .LC7@GOTOFF[ebx]
	push	eax
	lea	eax, .LC8@GOTOFF[ebx]
	push	eax
	call	fopen@PLT
	add	esp, 16
	mov	DWORD PTR -32[ebp], eax
	cmp	DWORD PTR -32[ebp], 0
	je	.L5
	sub	esp, 12
	lea	eax, .LC9@GOTOFF[ebx]
	push	eax
	call	puts@PLT
	add	esp, 16
	jmp	.L6
.L7:
	sub	esp, 8
	lea	eax, -1056[ebp]
	push	eax
	lea	eax, .LC10@GOTOFF[ebx]
	push	eax
	call	printf@PLT
	add	esp, 16
.L6:
	sub	esp, 4
	push	DWORD PTR -32[ebp]
	push	1024
	lea	eax, -1056[ebp]
	push	eax
	call	fgets@PLT
	add	esp, 16
	test	eax, eax
	jne	.L7
	sub	esp, 12
	push	DWORD PTR -32[ebp]
	call	fclose@PLT
	add	esp, 16
.L5:
	sub	esp, 12
	lea	eax, .LC11@GOTOFF[ebx]
	push	eax
	call	puts@PLT
	add	esp, 16
	mov	eax, DWORD PTR -1060[ebp]
	push	100
	push	0
	push	eax
	push	0
	call	foo
	add	esp, 16
	mov	eax, 0
	lea	esp, -8[ebp]
	pop	ecx
	pop	ebx
	pop	ebp
	lea	esp, -4[ecx]
	ret
	.size	main, .-main
	.section	.text.__x86.get_pc_thunk.ax,"axG",@progbits,__x86.get_pc_thunk.ax,comdat
	.globl	__x86.get_pc_thunk.ax
	.hidden	__x86.get_pc_thunk.ax
	.type	__x86.get_pc_thunk.ax, @function
__x86.get_pc_thunk.ax:
	mov	eax, DWORD PTR [esp]
	ret
	.section	.text.__x86.get_pc_thunk.bx,"axG",@progbits,__x86.get_pc_thunk.bx,comdat
	.globl	__x86.get_pc_thunk.bx
	.hidden	__x86.get_pc_thunk.bx
	.type	__x86.get_pc_thunk.bx, @function
__x86.get_pc_thunk.bx:
	mov	ebx, DWORD PTR [esp]
	ret
	.ident	"GCC: (Debian 6.3.0-18) 6.3.0 20170516"
	.section	.note.GNU-stack,"",@progbits
